name: "Nitro build tool for IOS"
description: "A Gihub Action for building React Native apps with Nitro"
branding:
  icon: "zap"
  color: "gray-dark"
inputs:
  # Basic configuration
  root-directory:
    description: The directory within your project, in which your code is located. Leave this field empty if your code is not located in a subdirectory"
    default: "."
  scheme:
    description: "The name of the iOS scheme"
  xcconfig-path:
    description: "Path to a custom xcconfig file. The path relative to project root directory where the custom `.xcconfig` file is located"

  # App Versioning
  version-name:
    description: "The version name for the app"
  version-code:
    description: "The version code for the app"
  disable-version-name-from-package-json:
    description: "Disable automatic version name configuration. By default will get the 'version' field from package.json and set the version name. Available Options: (`yes` / `no`)"
  disable-version-code-auto-generation:
    description: "Disable automatic version code generation. By default will generate a timestamp based number and set the version code. Available Options: (`yes` / `no`)"

  # App Signing
  certificate-url:
    description: "Certificate url. The url to download and install the certificate"
  certificate-base64:
    description: "Certificate base64. The certificate base64 string enconded."
  certificate-passphrase:
    description: "Certificate passphrase"
  codesigning-identity:
    description: "Codesigning identity"
  provisioning-profile-urls:
    description: "Provisioning profile urls. A string containing a '|' separated values where provisioning profiles are located (e.g. `url1|url2``)"
  provisioning-profiles-base64:
    description: "Provisioning profiles in base64 format. A string containing a '|' separated values with provisioning profiles base64 encoded (e.g. `bXktcHJvdmlzaW9uaW5nLXByb2ZpbGUtY29udGVudC0x|bXktcHJvdmlzaW9uaW5nLXByb2ZpbGUtY29udGVudC0y`)"
  provisioning-profile-specifier:
    description: "Provisioning profile specifier. The name of the provisioning profile when using a single one"
  team-id:
    description: "Team ID. Specify the Team ID you want to use for the Apple Developer Portal"
  export-method:
    description: "Export Method. The export method used to generate the IPA. Available Options: (`ad-hoc` / `app-store`)"
    default: "ad-hoc"

  # Caching
  cache-provider:
    description: "Cache provider where cache artifacts will be persisted. Available Options: (`fs`: File system / `github`: Uses Github cache action / `s3`: Amazon - Simple Storage Service)"
    default: "s3"
  disable-cache:
    description: "When setting this option to `yes` build cache optimizations won't be performed.  Available Options: (`yes` / `no`)"
  cache-env-var-lookup-keys:
    description: "List of env var keys for lookup to determine cache fingerprint. A list of `\\|` separated values with env variable keys to lookup to determine whether the build should be cached or not"
  cache-file-lookup-paths:
    description: "List of files for lookup to determine cache fingerprint. A list of `\\|` separated value paths (relative to the root of the repo or absolute) to lookup in order to determine whether the build should be cached or not"
  disable-metro-cache:
    description: "Setting this field to yes will disable the React Native Metro cache feature"

  # Hooks
  pre-install-command:
    description: "Run command prior to install project dependencies (e.g. `rm -rf ./some-folder`)"

  pre-build-command:
    description: "Run command prior to start building the app (e.g. `yarn tsc && yarn test`)"

  post-build-command:
    description: "Run command once build successfully finished (e.g. `yarn publish`)"

  # Advanced
  output-directory:
    description: "The path to the directory where to place all of Nitro's output files"
  entry-file:
    description: "The entry file for bundle generation"
  debug:
    description: "Enable verbose logs. Available Options: (`yes` / `no`)"
  fail-safe:
    description: "Runing the app in this mode allows you to prevent the build to fail but you can check the status in further steps"
outputs:
  nitro-build-status:
    description: "The status of the latest build (success / failure)"
    value: ${{ steps.nitro-cli.outputs.nitro-build-status }}
  nitro-output-dir:
    description: "The path to the directory where to place all of Nitro's output files"
    value: ${{ steps.nitro-cli.outputs.nitro-output-dir }}
  nitro-logs-path:
    description: "The full path to access the build log"
    value: ${{ steps.nitro-cli.outputs.nitro-logs-path }}
  nitro-deploy-path:
    description: "The full path to access the build artifacts"
    value: ${{ steps.nitro-cli.outputs.nitro-deploy-path }}
  nitro-summary-path:
    description: "The full path to access the build summary report"
    value: ${{ steps.nitro-cli.outputs.nitro-summary-path }}
runs:
  using: "composite"
  steps:
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
    - name: Install envman
      shell: bash
      run: |
        curl -fL https://github.com/bitrise-io/envman/releases/download/2.3.3/envman-"$(uname -s)"-"$(uname -m)" > /usr/local/bin/envman
        chmod +x /usr/local/bin/envman
    - name: Update Homebrew
      shell: bash
      run: |
        brew update --preinstall
    - name: Output for hashing pigz
      shell: bash
      run: |
        cat "$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/pigz.rb" > .github/brew-pigz
    - name: Output for hashing coreutils
      shell: bash
      run: |
        cat "$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/coreutils.rb" > .github/brew-coreutils
    - name: Configure Homebrew cache for pigz
      uses: actions/cache@v2
      with:
        path: |
          ~/Library/Caches/Homebrew/pigz--*
          ~/Library/Caches/Homebrew/downloads/*--pigz-*
        key: brew-pigz-${{ hashFiles('.github/brew-pigz') }}
        restore-keys: brew-
    - name: Configure Homebrew cache for coreutils
      uses: actions/cache@v2
      with:
        path: |
          ~/Library/Caches/Homebrew/coreutils--*
          ~/Library/Caches/Homebrew/downloads/*--coreutils-*
        key: brew-coreutils-${{ hashFiles('.github/brew-coreutils') }}
        restore-keys: brew-coreutils-
    - name: Install Homebrew dependencies
      shell: bash
      run: |
        env HOMEBREW_NO_AUTO_UPDATE=1 brew install pigz coreutils
    - uses: actions/cache@v3
      with:
        path: ${{ inputs.root-directory }}/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
    - name: Run Nitro cli
      id: nitro-cli
      shell: bash
      run: |
        set -ex

        sudo gem install fastlane

        if [[ "${{ inputs.fail-safe }}" == "true" || "${{ inputs.fail-safe }}" == "yes" ]]; then
          set +e
        fi

        # shellcheck disable=SC2154
        if [[ "${{ inputs.debug }}" == "true" || "${{ inputs.debug }}" == "yes" ]]; then
          set -x
        fi

        if [[ -n "${{ inputs.entry-file }}" ]]; then
          export ENTRY_FILE="${{ inputs.entry-file }}"
        fi

        # Obtain vm boot time
        ps_command=$([[ "$(uname)" == "Darwin" ]] && echo "ps -eo lstart,command" || echo "ps -eo lstart,cmd")
        date_command=$([[ "$(uname)" == "Darwin" ]] && echo "gdate" || echo "date")

        bitrise_process_started_at=$(${ps_command} | grep "Runner.Listener run" | grep -v grep | sed -e 's/^\(.\{24\}\).*/\1/' | head -1)
        bitrise_process_started_at_ms=$(${date_command} -d "${bitrise_process_started_at:=$(date)}" "+%s%3N")

        # Set environment variables
        export NITRO_BOOTED_AT_TIMESTAMP="${bitrise_process_started_at_ms}"

        # Build command arguments
        args=("ios")
        args+=("--tracking-provider" "nitro-on-premise")

        # shellcheck disable=SC2154
        if [[ "${{ inputs.debug }}" == "true" || "${{ inputs.debug }}" == "yes" ]]; then
          args+=("--verbose")
        fi

        args+=("--build-id" "${GITHUB_RUN_ID}_${GITHUB_RUN_NUMBER}_${GITHUB_RUN_ATTEMPT}")
        args+=("--repo-path" "${GITHUB_WORKSPACE}")

        # -------------------
        # Basic configuration
        # -------------------

        if [[ -n "${{ inputs.root-directory }}" ]]; then
          args+=("--root-directory" "${{ inputs.root-directory }}")
        fi

        if [[ -n "${{ inputs.scheme }}" ]]; then
          args+=("--scheme" "${{ inputs.scheme }}")
        fi

        if [[ -n "${{ inputs.xcconfig-path }}" ]]; then
          args+=("--xcconfig-path" "${{ inputs.xcconfig-path }}")
        fi

        # --------------
        # App Versioning
        # --------------

        if [[ -n "${{ inputs.version-name }}" ]]; then
          args+=("--version-name" "${{ inputs.version-name }}")
        fi

        if [[ -n "${{ inputs.version-code }}" ]]; then
          args+=("--version-code" "${{ inputs.version-code }}")
        fi

        # shellcheck disable=SC2154
        if [[ "${{ inputs.disable-version-name-from-package-json }}" == "true" || "${{ inputs.disable-version-name-from-package-json }}" == "yes" ]]; then
          args+=("--disable-version-name-from-package-json")
        fi

        # shellcheck disable=SC2154
        if [[ "${{ inputs.disable-version-code-auto-generation }}" == "true" || "${{ inputs.disable-version-code-auto-generation }}" == "yes" ]]; then
          args+=("--disable-version-code-auto-generation")
        fi

        # -----------
        # App Signing
        # -----------

        if [[ -n "${{ inputs.certificate-base64 }}" && -n "${{ inputs.certificate-url }}" ]]; then
          echo "⚠️ You cannot provide both: 'certificate-base64' and 'certificate-url'"
          exit 1
        fi

        if [[ -z "${{ inputs.certificate-base64 }}" && -z "${{ inputs.certificate-url }}" ]]; then
          echo "⚠️ You must provide at least one of these arguments: 'certificate-base64', 'certificate-url'"
          exit 1
        fi

        if [[ -n "${{ inputs.certificate-base64 }}" ]]; then
          echo -n "${{ inputs.certificate-base64 }}" | base64 --decode --output "${RUNNER_TEMP}/certificate.p12"
          args+=("--certificate-url" "file://${RUNNER_TEMP}/certificate.p12")
        else
          args+=("--certificate-url" "${{ inputs.certificate-url }}")
        fi

        if [[ -n "${{ inputs.certificate-passphrase }}" ]]; then
          args+=("--certificate-passphrase" "${{ inputs.certificate-passphrase }}")
        fi

        if [[ -n "${{ inputs.codesigning-identity }}" ]]; then
          args+=("--codesigning-identity" "${{ inputs.codesigning-identity }}")
        fi

        if [[ -n "${{ inputs.provisioning-profile-urls }}" && -n "${{ inputs.provisioning-profiles-base64 }}" ]]; then
          echo "⚠️ You cannot provide both 'provisioning-profile-urls' and 'provisioning-profiles-base64'"
          exit 1
        fi

        if [[ -z "${{ inputs.provisioning-profile-urls }}" && -z "${{ inputs.provisioning-profiles-base64 }}" ]]; then
          echo "⚠️ You must provide at least one of these arguments: 'provisioning-profile-urls', 'provisioning-profiles-base64'"
          exit 1
        fi

        if [[ -n "${{ inputs.provisioning-profile-urls }}" ]]; then
          IFS='|' ios_provisioning_profile_urls_array=("${{ inputs.provisioning-profile-urls }}")
        else
          IFS='|' ios_provisioning_profiles_base64_array=("${{ inputs.provisioning-profiles-base64 }}")

          for i in "${!ios_provisioning_profiles_base64_array[@]}"
          do
              provisioning_profile_base64=${ios_provisioning_profiles_base64_array[$i]}
              echo -n "${provisioning_profile_base64}" | base64 --decode --output "${RUNNER_TEMP}/${i}.mobileprovision"
              ios_provisioning_profile_urls_array+=("file://${RUNNER_TEMP}/${i}.mobileprovision")
          done
        fi

        # shellcheck disable=SC2206
        args+=("--provisioning-profile-urls" ${ios_provisioning_profile_urls_array[@]})

        if [[ -n "${{ inputs.provisioning-profile-specifier }}" ]]; then
          args+=("--provisioning-profile-specifier" "${{ inputs.provisioning-profile-specifier }}")
        fi

        if [[ -n "${{ inputs.team-id }}" ]]; then
          args+=("--team-id" "${{ inputs.team-id }}")
        fi

        if [[ -n "${{ inputs.export-method }}" ]]; then
          args+=("--export-method" "${{ inputs.export-method }}")
        fi

        # -------
        # Caching
        # -------

        if [[ -n "${{ inputs.cache-provider }}" ]]; then
          args+=("--cache-provider" "${{ inputs.cache-provider }}")
        fi

        # shellcheck disable=SC2154
        if [[ "${{ inputs.disable-cache }}" == "true" || "${{ inputs.disable-cache }}" == "yes" ]]; then
          args+=("--disable-cache")
        fi

        if [[ -n "${{ inputs.cache-env-var-lookup-keys }}" ]]; then
          IFS='|' cache_env_var_lookup_keys_value=("${{ inputs.cache-env-var-lookup-keys }}")
          # shellcheck disable=SC2206
          args+=("--cache-env-var-lookup-keys" ${cache_env_var_lookup_keys_value[@]})
        fi

        if [[ -n "${{ inputs.cache-file-lookup-paths }}" ]]; then
          IFS='|' cache_file_lookup_paths_value=("${{ inputs.cache-file-lookup-paths }}")
          # shellcheck disable=SC2206
          args+=("--cache-file-lookup-paths" ${cache_file_lookup_paths_value[@]})
        fi

        # shellcheck disable=SC2154
        if [[ "${{ inputs.disable-metro-cache }}" == "true" || "${{ inputs.disable-metro-cache }}" == "yes" ]]; then
          args+=("--disable-metro-cache")
        fi

        # -----
        # Hooks
        # -----

        if [[ -n "${{ inputs.pre-install-command }}" ]]; then
          args+=("--pre-install-command" "${{ inputs.pre-install-command }}")
        fi

        if [[ -n "${{ inputs.pre-build-command }}" ]]; then
          args+=("--pre-build-command" "${{ inputs.pre-build-command }}")
        fi

        if [[ -n "${{ inputs.post-build-command }}" ]]; then
          args+=("--post-build-command" "${{ inputs.post-build-command }}")
        fi

        # --------
        # Advanced
        # --------

        if [[ -n "${{ inputs.output-directory }}" ]]; then
          args+=("--output-directory" "${{ inputs.output-directory }}")
        fi

        # -------------------
        # Nitro Cli execution
        # -------------------

        BITRISE_STEP_VERSION=4.0.0

        MACOS_BIN_FILE="nitro-macos"
        LINUX_BIN_FILE="nitro-linux"

        BIN_FILE=$([[ "$(uname)" == "Darwin" ]] && echo "${MACOS_BIN_FILE}" || echo "${LINUX_BIN_FILE}")
        BIN_FILE_PATH="${RUNNER_TEMP}/nitro"

        # Download cli release
        wget -q "https://github.com/nitro-build/bitrise-step-nitro-ios/releases/download/${BITRISE_STEP_VERSION}/${BIN_FILE}" -O "${BIN_FILE_PATH}"
        chmod +x "${BIN_FILE_PATH}"

        ${BIN_FILE_PATH} "${args[@]}"

        exit_code=$?

        echo "nitro-output-dir=$(envman run bash -c 'echo ${NITRO_OUTPUT_DIR}')" >> $GITHUB_OUTPUT
        echo "nitro-logs-path=$(envman run bash -c 'echo ${NITRO_LOGS_PATH}')" >> $GITHUB_OUTPUT
        echo "nitro-deploy-path=$(envman run bash -c 'echo ${NITRO_DEPLOY_PATH}')" >> $GITHUB_OUTPUT
        echo "nitro-summary-path=$(envman run bash -c 'echo ${NITRO_SUMMARY_PATH}')" >> $GITHUB_OUTPUT

        if [[ exit_code -ne 0 ]]; then
          echo "⚠️ Nitro has thrown a '${exit_code}' error code while running on fail-safe mode. You can check 'NITRO_BUILD_FAILED' value in further steps."
          echo "nitro-build-failed=true" >> $GITHUB_OUTPUT
          echo "nitro-build-status=failed" >> $GITHUB_OUTPUT
        else
          echo "nitro-build-failed=false" >> $GITHUB_OUTPUT
          echo "nitro-build-status=success" >> $GITHUB_OUTPUT
        fi

        echo "NITRO_BOOTED_AT_TIMESTAMP: ${NITRO_BOOTED_AT_TIMESTAMP}"
